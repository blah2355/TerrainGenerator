#version 150

in vec3 position;


out float height;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec2 amplitude;


void main(void){


	// Translates the world positions by the transformation matrix so that the vertices move properly
	// This is what allows the vertices to be moved to different places, not just the static location 
	// where they are defined
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	
	// Translates the above translation by the view matrix
	// This is what allows the camera to move by translating the position of the vertices so that the 
	// camera appears to be moving
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	
	// Translates the vector above once more by the view matrix
	// This is what makes everything that is farther from the camera look farther away. This is the last
	// translation performed so the vertex vector is passed to gl_Position, which "draws" the vertex
	gl_Position = projectionMatrix * positionRelativeToCam;

	
	// The amplitude vector is of the form (max, min) so this converts those values into one float for use as the real amplitude
	float amp = amplitude.x - amplitude.y;
	
	// 10 different colors, 1/10 = 0.1
	float interval = 0.1;
	
	// The height value of the vertex is on [min,max] (the amplitude of the terrain generator is not necessarily constant)
	// So this is scaled to a more manageable interval of [0,1]
	height = ((position.y / amp) - (amplitude.y / amp));
	
}